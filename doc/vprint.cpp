#define MATRICKS_DEBUG 1


#include "matricks.h"

#include <iostream>
#include <string>

// used to demonstrate how to convert to C++ vectors
#include <vector>

#if CPP11 == 1
#include <initializer_list>
#endif


// ************************************************************
// The output screenshots are generated by examples/printing.cpp
// ************************************************************


int main()
{
  using namespace matricks;
  using namespace std;
  using namespace display;
  using namespace md;

  int Nex = 1;
  
  cr();
  mdtitle("\\*Formatted and styled printing");
  matricks_preamble();
  text("* The examples in this section can be found in file_ `examples/printing.cpp`\n");
  text("* All of the functions decribed in this section are in the namespace `display`");
  text("* Practically speaking, this functionality is one of the most useful aspects of mƒÅtricks.");


  // disp()
  
  header2("The function `disp(x)`");
  cr();cr();

  text("The function `disp(x)` displays both the variable name (or expression) as well as its value, formatted according to the user.   This is an incredibly useful function.");
  cr();cr();
  
  example(Nex++,"simple examples of `disp(x)` usage");
  cr();cr();
  text("Define and initialize some variables:");
  cr();cr();
  codestart("C++");
  codemulti(  int n = 45 );
  codemulti(  double x = 3.14 );
  codemulti(  double vals[] = {1.1,2.2,3.3} );
  codemulti(  bool done = true );
  codemulti( Vector<double> v = range<double>(1,10) );
  codemulti(  char str[] = "hello" );
  codemulti(  std::string s = "world"  );
  codemulti(  std::complex<double> z(1,-1)  );
  codeend();

  text("display each variable using `disp`:");
  cr();cr();

  codestart("C++");
  text("disp(n);");
  text("disp(x);");
  text("disp(vals);");
  text("disp(done);");
  text("disp(v);");
  text("disp(str);");
  text("disp(s);");
  text("disp(z);");
  codeend();

  cr();cr();
  text("The actual screen-shot of the output is shown below:");
  cr();cr();
  text("![disp example 1](disp_example1.png)");
  
  // tdisp()

  header2("The function `tdisp(x)`");
  cr();cr();

  text("The function `tdisp(x)` displays the variable type, in addition to the variable name and value");
  cr();cr();
  
  example(Nex++," `tdisp(x)` usage");

  cr();cr();

  codestart("C++");
  text("tdisp(n);");
  text("tdisp(x);");
  text("tdisp(vals);");
  text("tdisp(done);");
  text("tdisp(v);");
  text("tdisp(str);");
  text("tdisp(s);");
  text("tdisp(z);");
  codeend();

  cr();cr();
  text("The actual screen-shot of the output is shown below:");
  cr();cr();
  text("![disp example 2](disp_example2.png)");


  // mdisp()

  header2("The function `mdisp(x1,x2,...)`");
  cr();cr();

  text("* The function `mdisp(x1,x2,...)` displays multiple variables (from 1 to 10) on the same line.");
  text("* Very useful for displaying:");
  text("  * the arguments passed to a function");
  text("  * the variables inside a for loop");
  cr();cr();
  

  example(Nex++," `mdisp(x1,x2,...)` usage");
  cr();cr();

  codestart("C++");
  text("mdisp(n,x,vals,done,str,s,z);");
  codeend();

  cr();cr();
  text("The actual screen-shot of the output is shown below:");
  cr();cr();
  text("![disp example 3](disp_example3.png)");

  // tried this but doesn't help with displaying at the correct scale
  // the image are always blurred by github for some reason
  //text("<img src=\"disp_example3.png\" width=\"100%\" height=\"100%\">");



  // expressions

  header2("Displaying expressions");
  cr();cr();

  text("* The functions introduced above can also be used to display expressions.");
  text("* vector and matrix expressions can be displayed in this manner.");
  cr();cr();
  

  example(Nex++," displaying expressions");
  cr();cr();

  codestart("C++");
  text("disp(n+3);");
  text("disp(10*x-1);");
  text("disp(!done);");
  text("disp( round(10*sin(pi/10*v) + 10) );");
  text("disp(s+\" tour\");");
  codeend();

  cr();cr();
  text("The actual screen-shot of the output is shown below:");
  cr();cr();
  text("![disp example 4](disp_example4.png)");

  
  matricks_toc();

  return 0;
}
